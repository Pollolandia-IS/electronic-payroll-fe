/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import {
    TextField,
    Button,
    Dialog,
    InputAdornment,
    IconButton,
    Tooltip,
} from "@mui/material";
import SettingsBackupRestoreIcon from "@mui/icons-material/SettingsBackupRestore";
import { styled } from "@mui/material/styles";
import { useState, useEffect } from "react";

const TypeQuest = styled("div")(({ theme }) => ({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    boxShadow: `0px 1px 18px rgba(0, 0, 0, 0.12), 0px 6px 10px rgba(0, 0, 0, 0.14), 0px 3px 5px rgba(0, 0, 0, 0.2)`,
    borderRadius: `8px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    width: `500px`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    overflow: `hidden`,
}));

const Content = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `40px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
});

const Details = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px 10px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
});

const Frame1 = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
});

const NameAndTitle = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    margin: `0px`,
});

const AportarADeducción = styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 0.87)`,
    fontStyle: `normal`,
    fontFamily: `Heebo`,
    fontWeight: `700`,
    fontSize: `24px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `0px`,
}));

const IngresaElMontoQueDes = styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 0.6)`,
    fontStyle: `normal`,
    fontFamily: `Heebo`,
    fontWeight: `400`,
    fontSize: `16px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `10px 0px 0px 0px`,
}));

const FrameX = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-end`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `20px`,
    height: `20px`,
    margin: `0px`,
});

const X = styled("img")({
    height: `12px`,
    width: `12px`,
    margin: `0px`,
    cursor: `pointer`,
});

const TextFieldStandard = styled(TextField)({
    alignSelf: `stretch`,
    margin: `30px 0px 0px 0px`,
});

const TextFieldStandard1 = styled(TextField)({
    alignSelf: `stretch`,
    margin: `30px 0px 0px 0px`,
});

const Cta = styled("div")(({ theme }) => ({
    backgroundColor: `rgba(0, 0, 0, 0.04)`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `20px 40px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    height: `62px`,
    margin: `0px`,
}));

const Links = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-end`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    flexGrow: `1`,
    margin: `0px`,
});

const Link1 = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px`,
});

const Link2 = styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(25, 118, 210, 1)`,
    fontStyle: `normal`,
    fontFamily: `Roboto`,
    fontWeight: `400`,
    fontSize: `16px`,
    letterSpacing: `0.15000000596046448px`,
    textDecoration: `none`,
    lineHeight: `150%`,
    textTransform: `none`,
    margin: `0px`,
    cursor: `pointer`,
}));

const ButtonOutlined = styled(Button)({
    margin: `0px 0px 0px 30px`,
});

function AddDeductionModal(props) {
    useEffect(() => {
        if (props.amountChosen <= 0) {
            setIsValid(false);
        } else {
            setIsValid(true);
        }
    }, [props.amountChosen]);
    const [isValid, setIsValid] = useState(true);

    const handleChange = (event) => {
        props.setAmountChosen(event.target.value);
        if (event.target.value <= 0) {
            setIsValid(false);
        } else {
            setIsValid(true);
        }
    };

    return (
        <Dialog open={props.isOpen} onClose={() => props.setIsOpen(false)}>
            <TypeQuest>
                <Content>
                    <Details>
                        <Frame1>
                            <NameAndTitle>
                                <AportarADeducción>
                                    {`Aportar a deducción`}
                                </AportarADeducción>
                                <IngresaElMontoQueDes>
                                    {`Ingresa el monto que desees aportar a esta deducción o utiliza el monto por defecto.`}
                                </IngresaElMontoQueDes>
                            </NameAndTitle>
                            <FrameX onClick={() => props.setIsOpen(false)}>
                                <X src={"/assets/img/x.png"} alt={"x"} />
                            </FrameX>
                        </Frame1>
                        <TextFieldStandard
                            variant="standard"
                            size="small"
                            label={`Deducción`}
                            value={props.deductionName}
                            disabled
                        />
                        <TextFieldStandard1
                            variant="standard"
                            size="medium"
                            label={`Aporte`}
                            value={props.amountChosen}
                            type="number"
                            error={!isValid}
                            onChange={handleChange}
                            InputProps={{
                                startAdornment: (
                                    <InputAdornment position="start">
                                        <Tooltip
                                            title="Monto por defecto"
                                            arrow
                                            placement="bottom"
                                        >
                                            <SettingsBackupRestoreIcon
                                                sx={{
                                                    fontSize: 20,
                                                    cursor: "pointer",
                                                }}
                                                onClick={() =>
                                                    props.setAmountChosen(
                                                        props.defaultAmount
                                                    )
                                                }
                                            />
                                        </Tooltip>
                                    </InputAdornment>
                                ),
                                endAdornment: (
                                    <InputAdornment position="end">
                                        {props.currency}
                                    </InputAdornment>
                                ),
                            }}
                        />
                    </Details>
                </Content>
                <Cta>
                    <Links>
                        <Link1>
                            <Link2 onClick={() => props.setIsOpen(false)}>
                                {`Cancelar`}
                            </Link2>
                        </Link1>
                        <ButtonOutlined
                            variant="outlined"
                            disabled={!isValid}
                            size="large"
                            color="primary"
                            onClick={props.buttonAction}
                        >
                            {" "}
                            {props.buttonText}{" "}
                        </ButtonOutlined>
                    </Links>
                </Cta>
            </TypeQuest>
        </Dialog>
    );
}

export default AddDeductionModal;
